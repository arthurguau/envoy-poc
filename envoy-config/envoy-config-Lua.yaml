static_resources:
  listeners:
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 15001
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          codec_type: AUTO
          stat_prefix: ingress_http
          route_config:
            name: local_route
            virtual_hosts:
            - name: parties
              domains:
              - "*"
              routes:
              - match:
                  prefix: "/"
                route:
                  cluster: parties-service
          http_filters:
          - name: envoy.filters.http.ext_authz
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
              transport_api_version: V3
              http_service:
                server_uri:
                  uri: ext_authz
                  cluster: authz-http-service
                  timeout: 0.250s
                authorization_response:
                  allowed_upstream_headers:
                    patterns:
                    - exact: x-current-user
                    
          - name: lua_filter_with_JWT
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
              default_source_code:
                inline_string:
                  -- Called on the request path.
                  function envoy_on_request(request_handle)
                      -- Make an HTTP call to an upstream host with the following headers, body, and timeout.
                      local headers, body = request_handle:httpCall(
                      "lua_cluster",
                      {
                        [":method"] = "POST",
                        [":path"] = "/",
                        [":authority"] = "lua_cluster"
                      },
                      "hello world",
                      5000)

                      -- Add information from the HTTP call into the headers that are about to be sent to the next
                      -- filter in the filter chain.
                      request_handle:headers():add("upstream_foo", headers["foo"])
                      request_handle:headers():add("upstream_body_size", #body)
                  end
                  -- Called on the response path.
                  function envoy_on_response(response_handle)
                    -- Do something.
                  end       

          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

  clusters:
  - name: parties-service
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: parties-service
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: host.docker.internal  # parties-service
                port_value: 8080

  - name: authz-http-service
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: authz-http-service
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: host.docker.internal  # authz-http-service
                port_value: 9002
